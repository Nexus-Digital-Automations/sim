import {
  type Dispatch,
  type ReactElement,
  type SetStateAction,
  useEffect,
  useRef,
  useState,
} from 'react'
import { useAtom } from 'jotai'
import { toast } from 'sonner'
import { type ClassNameValue, twJoin, twMerge } from 'tailwind-merge'
import Avatar from '@/components/avatar/avatar'
import CopyText from '@/components/ui/custom/copy-text'
import { copy, exportToCsv, getIndexedItemsFromIndexedDB } from '@/lib/utils'
import {
  agentAtom,
  agentsAtom,
  customerAtom,
  customersAtom,
  dialogAtom,
  newSessionAtom,
  sessionAtom,
  sessionsAtom,
} from '@/store'
import { BASE_URL, deleteData, patchData } from '@/utils/api'
import { getDateStr, getTimeStr } from '@/utils/date'
import type { EventInterface, SessionCsvInterface, SessionInterface } from '@/utils/interfaces'
import { spaceClick } from '@/utils/methods'
import { NEW_SESSION_ID } from '../../chat-header/chat-header'
import { Button } from '../../ui/button'
import Tooltip from '../../ui/custom/tooltip'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '../../ui/dropdown-menu'
import { Input } from '../../ui/input'
import styles from './session-list-item.module.scss'

interface Props {
  session: SessionInterface
  disabled?: boolean
  isSelected?: boolean
  editingTitle?: string | null
  setEditingTitle?: Dispatch<SetStateAction<string | null>>
  refetch?: () => void
  tabIndex?: number
  className?: ClassNameValue
}

export const DeleteDialog = ({
  session,
  closeDialog,
  deleteClicked,
}: {
  session: SessionInterface
  closeDialog: () => void
  deleteClicked: (e: React.MouseEvent) => Promise<void> | undefined
}) => (
  <div data-testid='deleteDialogContent'>
    <SessionListItem session={session} disabled />
    <div className='flex h-[80px] items-center justify-end pe-[18px]'>
      <Button
        data-testid='cancel-delete'
        onClick={closeDialog}
        className='!bg-white me-[10px] h-[46px] w-[96px] rounded-[6px] border px-[24px] py-[12px] font-normal text-[#656565] text-[16px] hover:text-[#151515]'
      >
        Cancel
      </Button>
      <Button
        data-testid='gradient-button'
        onClick={deleteClicked}
        className='h-[46px] w-[161px] rounded-[6px] bg-green-main px-[29.5px] py-[10px] font-medium text-[15px] hover:bg-green-hover'
      >
        Delete Session
      </Button>
    </div>
  </div>
)

export default function SessionListItem({
  session,
  isSelected,
  refetch,
  editingTitle,
  setEditingTitle,
  tabIndex,
  disabled,
  className,
}: Props): ReactElement {
  const sessionNameRef = useRef<HTMLInputElement>(null)
  const [agents] = useAtom(agentsAtom)
  const [customers] = useAtom(customersAtom)
  const [agentsMap, setAgentsMap] = useState(new Map())
  const [customerMap, setCustomerMap] = useState(new Map())
  const [, setSession] = useAtom(sessionAtom)
  const [, setAgent] = useAtom(agentAtom)
  const [, setCustomer] = useAtom(customerAtom)
  const [, setNewSession] = useAtom(newSessionAtom)
  const [, setSessions] = useAtom(sessionsAtom)
  const [dialog] = useAtom(dialogAtom)
  const [isDeleting, setIsDeleting] = useState(false)
  const contentRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (!isSelected) return
    if (session.id === NEW_SESSION_ID && !session.agent_id) setAgent(null)
    else {
      setAgent(agents?.find((a) => a.id === session.agent_id) || null)
      setCustomer(customers?.find((c) => c.id === session.customer_id) || null)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isSelected, setAgent, session.id, session.agent_id, session.title])

  useEffect(() => {
    if (agents) setAgentsMap(new Map(agents.map((agent) => [agent.id, agent])))
  }, [agents])

  useEffect(() => {
    if (customers) setCustomerMap(new Map(customers.map((customer) => [customer.id, customer])))
  }, [customers])

  const deleteSession = async (e: React.MouseEvent) => {
    e.stopPropagation()

    const deleteClicked = (e: React.MouseEvent) => {
      dialog.closeDialog()
      e.stopPropagation()
      if (session.id === NEW_SESSION_ID) {
        setNewSession(null)
        setSession(null)
        setAgent(null)
        return
      }
      setIsDeleting(true)
      if (isSelected) {
        setSession(null)
        document.title = 'Parlant'
      }

      return deleteData(`sessions/${session.id}`)
        .then(() => {
          setSessions((sessions) => sessions.filter((s) => s.id !== session.id))
          toast.success(`Session "${session.title}" deleted successfully`)
          setIsDeleting(false)
        })
        .catch(() => {
          toast.error('Something went wrong')
          setIsDeleting(false)
        })
    }

    dialog.openDialog(
      'Delete Session',
      <DeleteDialog
        closeDialog={dialog.closeDialog}
        deleteClicked={deleteClicked}
        session={session}
      />,
      {
        height: '230px',
        width: '480px',
      },
      () => (document.body.style.pointerEvents = 'auto')
    )
  }

  const exportSessionToCsv = async (e: React.MouseEvent) => {
    const flaggedItems = await getIndexedItemsFromIndexedDB(
      'Parlant-flags',
      'message_flags',
      'sessionIndex',
      session.id,
      { name: 'sessionIndex', keyPath: 'sessionId' },
      true
    )

    e.stopPropagation()

    try {
      const sessionEvents: EventInterface[] = (await fetchSessionData(session.id)) || []
      const messages = sessionEvents.filter((sessionEvent) => sessionEvent.kind === 'message')

      const exportData: SessionCsvInterface[] = []
      if (messages?.length) {
        messages.forEach((message) => {
          exportData.push({
            'Correlation ID': message.correlation_id,
            Source: message.source === 'ai_agent' ? 'AI Agent' : 'Customer',
            Participant: message?.data?.participant?.display_name || '',
            Timestamp: message.creation_utc || '',
            Message: message.data?.message || '',
            Draft: message.data?.draft || '',
            Tags: message.data?.tags || '',
            Flag: flaggedItems?.[message.correlation_id] || '',
          })
        })
      }

      const headers = [
        'Correlation ID',
        'Source',
        'Participant',
        'Timestamp',
        'Message',
        'Draft',
        'Tags',
        'Flag',
      ]

      const filename = `session_${session.id}_"${session.title.replace(/[^a-zA-Z0-9]/g, '_')}.csv`

      const success = exportToCsv(exportData, filename, {
        headers,
        dateFormat: 'readable',
      })

      if (success) {
        toast.success(`Session "${session.title}" exported successfully`)
      } else {
        throw new Error('Export failed')
      }
    } catch (error) {
      console.error('Export failed:', error)
      toast.error('Failed to export session')
    }
  }

  const fetchSessionData = async (sessionId: string) => {
    try {
      const response = await fetch(`${BASE_URL}/sessions/${sessionId}/events`)
      if (!response.ok) throw new Error('Failed to fetch session data')
      return await response.json()
    } catch (error) {
      console.error('Failed to fetch session data:', error)
      return { messages: [] }
    }
  }

  const editTitle = async (e: React.MouseEvent) => {
    e.stopPropagation()
    setEditingTitle?.(session.id)
    setTimeout(() => sessionNameRef?.current?.select(), 0)
  }

  const saveTitleChange = (e: React.MouseEvent | React.KeyboardEvent) => {
    e.stopPropagation()
    const title = sessionNameRef?.current?.value?.trim()
    if (title) {
      if (session.id === NEW_SESSION_ID) {
        setEditingTitle?.(null)
        setNewSession((session: SessionInterface | null) =>
          session ? { ...session, title } : session
        )
        toast.success('title changed successfully')
        return
      }
      patchData(`sessions/${session.id}`, { title })
        .then(() => {
          setEditingTitle?.(null)
          refetch?.()
          toast.success('title changed successfully')
        })
        .catch(() => {
          toast.error('Something went wrong')
        })
    }
  }

  const cancel = (e: React.MouseEvent) => {
    e.stopPropagation()
    setEditingTitle?.(null)
  }

  const onInputKeyUp = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') saveTitleChange(e)
  }

  const sessionActions = [
    {
      title: 'copy ID',
      onClick: (e: React.MouseEvent) => {
        e.stopPropagation()
        copy(session.id, contentRef?.current || undefined)
      },
      imgPath: 'icons/copy-session.svg',
    },
    { title: 'rename', onClick: editTitle, imgPath: 'icons/rename.svg' },
    { title: 'export', onClick: exportSessionToCsv, imgPath: 'icons/export.svg' },
    { title: 'delete', onClick: deleteSession, imgPath: 'icons/delete.svg' },
  ]
  const agent = agentsMap.get(session.agent_id)
  const customer = customerMap.get(session.customer_id)

  return (
    <Tooltip
      value={
        <div className='flex items-center font-light text-[#a9a9a9]'>
          <CopyText
            preText='Session ID:'
            textToCopy={session.id}
            text={session.id}
            className='!text-[#a9a9a9] !text-[13px] [&_.copy-icon]:!block ms-[4px] hover:text-[#151515] [&_img]:opacity-60'
          />
        </div>
      }
      side='right'
    >
      <div
        data-testid='session'
        role='button'
        tabIndex={tabIndex}
        onKeyDown={spaceClick}
        onClick={() => !disabled && !editingTitle && !isDeleting && setSession(session)}
        key={session.id}
        className={twMerge(
          'mr-0 ml-0 flex h-[74px] min-h-[74px] animate-fade-in cursor-pointer items-center justify-between border-[#F9FAFC] border-b-[0.6px] border-b-solid bg-white p-1 ps-[8px] font-inter font-medium text-[14px] hover:rounded-[6px] ',
          isSelected && ' rounded-[6px]',
          editingTitle === session.id
            ? `${styles.editSession} !p-[4px_2px] `
            : editingTitle
              ? ' opacity-[33%] '
              : ' hover:bg-main ',
          isSelected && editingTitle !== session.id ? '!bg-[#F5F6F8]' : '',
          disabled ? ' pointer-events-none' : '',
          isDeleting ? 'opacity-[33%]' : '',
          className
        )}
      >
        <div className='ms-[4px] flex h-[48px] max-w-[210px] flex-1 overflow-hidden whitespace-nowrap'>
          {editingTitle !== session.id && (
            <div className='flex items-center overflow-visible overflow-ellipsis'>
              <div>
                <Avatar
                  agent={agent || { id: '', name: 'N/A' }}
                  customer={customer || { id: '', name: 'N/A' }}
                />
              </div>
              <div className={twJoin(!agent && 'opacity-50', 'ms-[4px] text-[15px]')}>
                {session.title}
                <small className='-mb-[7px] flex gap-[6px] font-light text-[#A9A9A9] text-[13px]'>
                  {getDateStr(session.creation_utc)}
                  <img src='icons/dot-saparetor.svg' alt='' height={18} width={3} />
                  {getTimeStr(session.creation_utc)}
                </small>
              </div>
            </div>
          )}
          {editingTitle === session.id && (
            <div className='flex items-center ps-[6px]'>
              <div>{agent && <Avatar agent={agent} />}</div>
              <Input
                data-testid='sessionTitle'
                ref={sessionNameRef}
                onKeyUp={onInputKeyUp}
                onClick={(e) => e.stopPropagation()}
                defaultValue={session.title}
                className='box-shadow-none ms-[6px] h-fit border-none bg-[#F5F6F8] p-1 text-foreground'
              />
            </div>
          )}
        </div>
        <div className='flex h-[39px] items-center'>
          {!disabled && editingTitle !== session.id && session.id !== NEW_SESSION_ID && (
            <DropdownMenu>
              <DropdownMenuTrigger
                disabled={!!editingTitle}
                className='outline-none'
                data-testid='menu-button'
                tabIndex={-1}
                onClick={(e) => e.stopPropagation()}
              >
                <div
                  tabIndex={tabIndex}
                  role='button'
                  className='me-[14px] rounded-full'
                  onClick={(e) => e.stopPropagation()}
                >
                  <img src='icons/more.svg' alt='more' height={14} width={14} />
                </div>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                ref={contentRef}
                side='right'
                align='start'
                className='-ms-[10px] flex w-[168px] flex-col gap-[8px] rounded-[8px] border-none px-[10px] py-[14px] [box-shadow:_0px_8px_20px_-8px_#00000012]'
              >
                {sessionActions.map((sessionAction) => (
                  <DropdownMenuItem
                    tabIndex={0}
                    key={sessionAction.title}
                    onClick={sessionAction.onClick}
                    className='hover:!bg-[#FAF9FF] gap-0 px-[20px] font-inter font-normal text-[14px] capitalize'
                  >
                    <img
                      data-testid={sessionAction.title}
                      src={sessionAction.imgPath}
                      height={16}
                      width={18}
                      className='me-[8px]'
                      alt=''
                    />
                    {sessionAction.title}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          )}

          {editingTitle === session.id && (
            <div className='me-[18px]'>
              <Tooltip value='Cancel'>
                <Button
                  data-testid='cancel'
                  variant='ghost'
                  className='h-[28px] w-[28px] rounded-full p-[8px]'
                  onClick={cancel}
                >
                  <img src='icons/cancel.svg' alt='cancel' />
                </Button>
              </Tooltip>
              <Tooltip value='Save'>
                <Button
                  variant='ghost'
                  className='h-[28px] w-[28px] rounded-full p-[8px]'
                  onClick={saveTitleChange}
                >
                  <img src='icons/save.svg' alt='cancel' />
                </Button>
              </Tooltip>
            </div>
          )}
        </div>
      </div>
    </Tooltip>
  )
}
