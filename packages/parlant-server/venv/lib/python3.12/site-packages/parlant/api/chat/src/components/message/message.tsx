/* eslint-disable react-hooks/exhaustive-deps */
import { type ReactElement, useEffect, useRef, useState } from 'react'
import { useAtom } from 'jotai'
import { twMerge } from 'tailwind-merge'
import { sessionAtom } from '@/store'
import type { EventInterface } from '@/utils/interfaces'
import { Button } from '../ui/button'
import Spacer from '../ui/custom/spacer'
import { Textarea } from '../ui/textarea'
import MessageBubble from './message-bubble'

interface Props {
  event: EventInterface
  sameCorrelationMessages?: EventInterface[]
  isContinual: boolean
  isRegenerateHidden?: boolean
  isFirstMessageInDate?: boolean
  flagged?: string
  flaggedChanged?: (flagged: string) => void
  showLogsForMessage?: EventInterface | null
  regenerateMessageFn?: (sessionId: string) => void
  resendMessageFn?: (sessionId: string, text?: string) => void
  showLogs: (event: EventInterface) => void
  setIsEditing?: React.Dispatch<React.SetStateAction<boolean>>
}

const MessageEditing = ({ event, resendMessageFn, setIsEditing }: Props) => {
  const ref = useRef<HTMLDivElement>(null)
  const textArea = useRef<HTMLTextAreaElement>(null)
  const [textValue, setTextValue] = useState(event?.data?.message || '')
  const [session] = useAtom(sessionAtom)

  useEffect(() => {
    textArea?.current?.select()
  }, [textArea?.current])

  useEffect(() => {
    ref?.current?.scrollIntoView({ behavior: 'smooth', block: 'nearest' })
  }, [ref?.current])

  return (
    <div
      ref={ref}
      className='w-full max-w-[min(560px,90%)] origin-bottom rounded-[16px] rounded-br-none border bg-[#f5f6f8] p-[16px] ps-[6px] pe-[6px] '
      style={{ transformOrigin: 'bottom' }}
    >
      <Textarea
        ref={textArea}
        className='!ring-0 !ring-offset-0 h-[120px] resize-none border-none bg-[#f5f6f8] ps-[22px] pe-[108px] [direction:ltr]'
        onChange={(e) => setTextValue(e.target.value)}
        defaultValue={textValue}
      />
      <div className='flex justify-end gap-[10px] pe-[12px] pt-[10px] [direction:ltr]'>
        <Button
          variant='ghost'
          onClick={() => setIsEditing?.(false)}
          className='rounded-[10px] hover:bg-white'
        >
          Cancel
        </Button>
        <Button
          disabled={!textValue?.trim() || textValue?.trim() === event?.data?.message}
          className='rounded-[10px]'
          onClick={() => {
            resendMessageFn?.(session?.id || '', textValue?.trim())
            setIsEditing?.(false)
          }}
        >
          Apply
        </Button>
      </div>
    </div>
  )
}

function Message({
  event,
  isFirstMessageInDate,
  isContinual,
  showLogs,
  showLogsForMessage,
  resendMessageFn,
  flagged,
  flaggedChanged,
  sameCorrelationMessages,
}: Props): ReactElement {
  const [isEditing, setIsEditing] = useState(false)
  return (
    <div className={twMerge(isEditing && 'flex justify-center [direction:rtl]')}>
      <div
        className={twMerge(
          'scrollbar mx-0 mb-1 flex w-full animate-fade-in justify-between py-[3px]',
          isEditing &&
            'flex w-[calc(100%-412px)] max-w-[1000px] flex-1 items-end justify-start self-end max-[1700px]:w-[calc(100%-40px)] max-[2100px]:w-[calc(100%-200px)]'
        )}
      >
        <Spacer />
        {isEditing ? (
          <MessageEditing
            resendMessageFn={resendMessageFn}
            setIsEditing={setIsEditing}
            event={event}
            isContinual={isContinual}
            showLogs={showLogs}
            showLogsForMessage={showLogsForMessage}
          />
        ) : (
          <MessageBubble
            isFirstMessageInDate={isFirstMessageInDate}
            setIsEditing={setIsEditing}
            event={event}
            isContinual={isContinual}
            showLogs={showLogs}
            showLogsForMessage={showLogsForMessage}
            flagged={flagged}
            flaggedChanged={flaggedChanged}
            sameCorrelationMessages={sameCorrelationMessages}
          />
        )}
        <Spacer />
      </div>
    </div>
  )
}

export default Message
