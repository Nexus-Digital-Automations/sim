import { memo, type ReactNode, useEffect, useRef, useState } from 'react'
import { X } from 'lucide-react'
import { type ClassNameValue, twMerge } from 'tailwind-merge'
import { getDistanceToRight } from '@/utils/methods'
import { Button } from '../ui/button'
import { Checkbox } from '../ui/checkbox'
import Tooltip from '../ui/custom/tooltip'
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
} from '../ui/dialog'
import { Input } from '../ui/input'
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '../ui/select'

export type Type = 'GuidelineMatcher' | 'MessageEventComposer' | 'ToolCaller'
export type Level = 'CRITICAL' | 'ERROR' | 'WARNING' | 'INFO' | 'DEBUG' | 'TRACE'

const ALL_TYPES: Type[] = ['GuidelineMatcher', 'ToolCaller', 'MessageEventComposer']
const ALL_LEVELS: Level[] = ['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG', 'TRACE']

const typeOptions: { [key in Type]: { label: string; icon: string; color: string } } = {
  GuidelineMatcher: {
    label: 'Guideline Matcher',
    icon: 'icons/filters/guideline-matcher-color.svg',
    color: '#419480',
  },
  MessageEventComposer: {
    label: 'Message Event Composer',
    icon: 'icons/filters/message-composer-color.svg',
    color: '#7E3A89',
  },
  ToolCaller: {
    label: 'Tool Caller',
    icon: 'icons/filters/tool-caller-color.svg',
    color: '#CB7714',
  },
}

const AddFilterChip = ({ className }: { className?: ClassNameValue }) => {
  return (
    <div
      className={twMerge(
        'group flex h-[30px] w-full cursor-pointer items-center rounded-[6px] border border-[#eeeeee] bg-white shadow-main hover:border-[#E4E6EA] hover:bg-[#F3F5F9]',
        className
      )}
    >
      <div className='flex h-[calc(100%-4px)] w-[calc(100%-4px)] items-center justify-center rounded-[3px] px-[8px] py-[5px] pe-[6px] leading-[16px]'>
        {/* <p className='me-[5px] text-[14px]'>+</p> */}
        <img src='icons/text.svg' alt='' className='me-[5px]' />
        <p className='text-nowrap font-normal text-[14px]'>Add Content Filter</p>
      </div>
    </div>
  )
}

const FilterDialogContent = ({
  contentChanged,
  defaultValue,
}: {
  contentChanged: (text: string) => void
  defaultValue?: string
}) => {
  const [inputVal, setInputVal] = useState(defaultValue || '')

  const onApplyClick = () => {
    const trimmed = inputVal.trim()
    if (trimmed) contentChanged(inputVal)
  }

  return (
    <div className='flex flex-col gap-[22px] px-[39px] py-[42px]'>
      <h2 className='font-normal text-[20px]'>Filter by content</h2>
      <div className='focus-within:!bg-white flex h-[38px] items-center rounded-[5px] border bg-[#FBFBFB] hover:bg-[#F5F6F8]'>
        <Input
          value={inputVal}
          onChange={(e) => setInputVal(e.target.value)}
          name='filter'
          className='!ring-0 !ring-offset-0 focus:!bg-white h-[36px] border-none bg-[#FBFBFB] text-[16px] hover:bg-[#F5F6F8]'
        />
      </div>
      <div className='buttons flex items-center justify-end gap-[16px] font-inter font-normal text-[16px]'>
        <DialogClose className='!bg-white h-[38px] w-[84px] rounded-[5px] border text-[#656565] hover:text-[#151515]'>
          Cancel
        </DialogClose>
        <DialogClose
          onClick={onApplyClick}
          className='h-[38px] w-[79px] rounded-[5px] bg-green-main text-white hover:bg-green-hover'
        >
          Apply
        </DialogClose>
      </div>
    </div>
  )
}

const FilterDialog = ({
  contentChanged,
  content,
  children,
  className,
}: {
  contentChanged: (text: string) => void
  content?: string
  children?: ReactNode
  className?: ClassNameValue
}) => {
  return (
    <Dialog>
      <DialogTrigger className='w-full'>
        {children || <AddFilterChip className={className} />}
      </DialogTrigger>
      <DialogPortal aria-hidden={false}>
        <DialogContent aria-hidden={false} className='z-[99] p-0 [&>button]:hidden'>
          <DialogTitle className='hidden'>Filter by content</DialogTitle>
          <DialogDescription className='hidden'>Filter by content</DialogDescription>
          <FilterDialogContent contentChanged={contentChanged} defaultValue={content || ''} />
        </DialogContent>
      </DialogPortal>
    </Dialog>
  )
}

const LogFilters = ({
  applyFn,
  def,
  filterId,
  className,
  showDropdown,
  showTags,
  deleteFilterTab,
}: {
  applyFn: (types: string[], level: string, content: string[]) => void
  filterId?: number
  def?: { level?: Level; types?: Type[]; content?: string[] } | null
  className?: ClassNameValue
  showDropdown?: boolean
  showTags?: boolean
  deleteFilterTab?: (filterId: number | undefined) => void
}) => {
  const [sources, setSources] = useState(structuredClone(def?.types || []))
  const [contentConditions, setContentConditions] = useState(structuredClone(def?.content || []))
  const [level, setLevel] = useState<Level>(def?.level || ALL_LEVELS[ALL_LEVELS.length - 1])
  const [prevTabId, setPrevTabId] = useState<number | undefined>()

  useEffect(() => {
    if (!showTags) return
    if (filterId && filterId !== prevTabId) {
      const types = structuredClone(def?.types || ALL_TYPES)
      const level = def?.level || ALL_LEVELS[ALL_LEVELS.length - 1]
      const content = def?.content || []
      setSources(types)
      setLevel(level)
      setContentConditions(content)
      applyFn(types, level, content)
      setPrevTabId(filterId)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [filterId])

  useEffect(() => {
    setSources(def?.types || [])
    setLevel(def?.level || ALL_LEVELS[ALL_LEVELS.length - 1])
    setContentConditions(def?.content || [])
  }, [def])

  // const changeSource = (type: Type, value: boolean, cb?: (sources: Type[], level: Level, contentConditions: string[]) => void) => {
  // 	setSources((val) => {
  // 		if (value) val.push(type);
  // 		else val = val.filter((item) => item !== type);
  // 		const vals = [...new Set(val)];
  // 		cb?.(vals, level, contentConditions);
  // 		return vals;
  // 	});
  // };

  const TypeChip = ({ type, className }: { type: Type; className?: ClassNameValue }) => {
    return (
      <div
        key={type}
        className={twMerge(
          'group flex h-[30px] cursor-default items-center gap-[8px] rounded-[5px] border border-[#EEEEEE] ps-[6px] pe-[6px] pt-[6px] pb-[5px] hover:bg-white',
          className
        )}
      >
        <img src={typeOptions[type].icon} alt={type} />
        <p className='text-nowrap font-normal text-[14px]'>{typeOptions[type].label}</p>
        {/* <X role='button' className='invisible size-[18px] group-hover:visible rounded-[3px]' onClick={() => changeSource(type, false, applyFn)} /> */}
      </div>
    )
  }

  const CondChip = ({
    text,
    index,
    apply,
    deleted,
    wrapperClassName,
    className,
    deleteButtonClassName,
  }: {
    text: string
    index: number
    apply?: boolean
    deleted?: () => void
    className?: ClassNameValue
    wrapperClassName?: ClassNameValue
    deleteButtonClassName?: ClassNameValue
  }) => {
    return (
      <Tooltip value={text} side='top' delayDuration={1000}>
        <div
          key={text}
          className={twMerge(
            'group flex h-[30px] w-fit max-w-[320px] cursor-default items-center justify-center rounded-[5px] border border-[#EEEEEE] bg-white px-[2px]',
            wrapperClassName
          )}
        >
          <div
            className={twMerge(
              'flex h-[calc(100%-4px)] w-full max-w-full items-center justify-between gap-[8px] rounded-[3px] py-[5px] ps-[5px] pe-[6px]',
              className
            )}
          >
            <div className='flex items-center gap-[8px] leading-[16px]'>
              <img src='icons/text.svg' alt='' />
              <p className='max-w-full cursor-default overflow-hidden text-ellipsis text-nowrap font-light text-[14px]'>
                {text}
              </p>
            </div>
            {deleted && (
              <X
                role='button'
                className={twMerge(
                  'invisible size-[18px] min-w-[18px] rounded-[3px] group-hover:visible',
                  deleteButtonClassName
                )}
                onClick={(e) => {
                  e.stopPropagation()
                  const newContentConditions = contentConditions?.filter((_, i) => i !== index)
                  if (apply) {
                    setContentConditions(newContentConditions)
                    applyFn(sources, level, newContentConditions)
                  }
                  deleted?.()
                }}
              />
            )}
          </div>
        </div>
      </Tooltip>
    )
  }

  const DropDownFilter = () => {
    const [dropdownOpen, setDropdownOpen] = useState(false)
    const [sources, setSources] = useState<Type[]>(structuredClone(def?.types || []))
    const [content, setContent] = useState<string[]>(structuredClone(def?.content || []))
    const [level, setLevel] = useState<Level>(def?.level || ALL_LEVELS[ALL_LEVELS.length - 1])
    const wrapperRef = useRef<HTMLDivElement>(null)
    const [usePopupToLeft, setUsePopupToLeft] = useState(false)

    const changeSource = (type: Type, value: boolean) => {
      setSources((val) => {
        if (value) val.push(type)
        else val = val.filter((item) => item !== type)
        const vals = [...new Set(val)]
        return vals
      })
    }

    useEffect(() => {
      if (!dropdownOpen) {
        setSources(structuredClone(def?.types || []))
        setContent(structuredClone(def?.content || []))
      }
    }, [dropdownOpen])

    useEffect(() => {
      if (wrapperRef?.current) {
        if (getDistanceToRight(wrapperRef.current) < 218) setUsePopupToLeft(true)
        else setUsePopupToLeft(false)
      }
    }, [wrapperRef?.current?.scrollWidth, dropdownOpen])

    const changeMenuOpen = () => {
      setDropdownOpen(!dropdownOpen)
      setSources(structuredClone(def?.types || []))
      setContent(structuredClone(def?.content || []))
    }

    return (
      <div className='wrapper relative flex h-[30px] items-center' ref={wrapperRef}>
        <div>
          <div
            onClick={changeMenuOpen}
            role='button'
            className={twMerge(
              'group flex h-[30px] max-h-[30px] w-[73px] min-w-max items-center gap-[6px] rounded-[6px] bg-white pe-[8px]',
              dropdownOpen && 'border-transparent bg-white'
            )}
          >
            <img src='icons/funnel.svg' className='size-[16px] [stroke-width:2px]' />
            <p className='select-none font-medium text-[14px] group-hover:underline'>
              Edit Filters
            </p>
          </div>
        </div>
        <div
          className={twMerge(
            'absolute top-[38px] left-0 z-50 hidden w-[246px] rounded-[7px] border bg-white',
            dropdownOpen && 'block',
            usePopupToLeft ? 'right-0 left-[unset]' : ''
          )}
        >
          <div className='flex items-center justify-between'>
            <div className='flex h-[35px] items-center gap-[6px] px-[14px]'>
              {/* <ListFilter className='[stroke-width:2px] size-[16px]' /> */}
              <p className='font-normal text-[14px]'>Filter</p>
            </div>
            <div
              role='button'
              onClick={changeMenuOpen}
              className='me-[2px] flex h-[24px] w-[24px] items-center justify-center'
            >
              <img src='icons/close.svg' alt='close' />
            </div>
          </div>
          <hr className='bg-[#EBECF0]' />
          <div className='flex items-center gap-[6px] px-[14px]'>
            <p className='font-normal text-[14px]'>Level:</p>
            <Select value={level} onValueChange={(value) => setLevel(value as Level)}>
              <SelectTrigger className='!ring-0 !ring-offset-0 m-auto my-[5px] h-[30px] border capitalize'>
                <SelectValue placeholder={level?.toLowerCase()} />
              </SelectTrigger>
              <SelectContent className='z-[999999]'>
                <SelectGroup>
                  {ALL_LEVELS.toReversed().map((level) => (
                    <SelectItem key={level} value={level} className='capitalize'>
                      {level?.toLowerCase()}
                    </SelectItem>
                  ))}
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
          <hr className='bg-[#EBECF0]' />
          <div className='mt-[9px] flex flex-col gap-[4px] px-[8px] pb-[11px]'>
            {ALL_TYPES.map((type) => (
              <div
                key={type}
                className={twMerge(
                  'flex h-[24px] items-center space-x-2 rounded-[3px] py-[4px] ps-[4px] hover:bg-main',
                  sources.includes(type) && '!bg-gray-4'
                )}
              >
                <Checkbox
                  id={type}
                  checked={sources?.includes(type)}
                  className='!bg-white rounded-[2px] border-black [&_svg]:[stroke:#006E53]'
                  onCheckedChange={(isChecked) => changeSource(type, !!isChecked)}
                />
                <label
                  className='!ms-[12px] flex w-full cursor-pointer gap-[8px] font-light text-[14px]'
                  htmlFor={type}
                >
                  <img src={typeOptions[type].icon} alt={type} />
                  {typeOptions[type].label}
                </label>
              </div>
            ))}
          </div>
          <hr className='bg-[#EBECF0]' />
          <div
            className={twMerge(
              'inputs flex max-h-[200px] flex-wrap gap-[6px] overflow-auto px-[14px] pt-[11px] pb-[14px]',
              !content?.length && 'h-0 p-0'
            )}
          >
            {content?.map((item, i) => (
              <FilterDialog
                key={item}
                content={item}
                contentChanged={(inputVal) => {
                  setContent((c) => {
                    c[i] = inputVal
                    return [...c]
                  })
                }}
              >
                <CondChip
                  text={item}
                  index={i}
                  apply={false}
                  deleted={() => setContent(content.filter((_, index) => index !== i))}
                  wrapperClassName='w-full !border-0 bg-[#F5F6F8] hover:bg-[#EBECF0]'
                  className='!border-0 justify-between bg-[#F5F6F8] group-hover:bg-[#EBECF0]'
                  deleteButtonClassName='visible'
                />
              </FilterDialog>
            ))}
          </div>
          {!!content?.length && <hr className='w-full bg-[#EBECF0]' />}
          <div className='flex h-[54px] items-center px-[14px]'>
            <FilterDialog contentChanged={(inputVal) => setContent((val) => [...val, inputVal])} />
          </div>
          <hr className='bg-[#EBECF0]' />
          <div className='buttons flex h-[47px] items-center gap-[8px] p-[6px]'>
            <Button
              onClick={() => applyFn([], 'DEBUG', [])}
              variant='ghost'
              className='h-[35px] w-[95px] flex-1 bg-[#FAFAFA] font-normal text-[#656565] text-[12px] hover:bg-[#F3F5F9] hover:text-[#151515]'
            >
              Clear all
            </Button>
            <Button
              variant='ghost'
              onClick={() => {
                applyFn(sources, level, content)
                setDropdownOpen(false)
              }}
              className='!text-white h-[35px] w-fit max-w-fit flex-1 bg-green-main ps-[12px] pe-[10px] font-normal text-[12px] hover:bg-[#005C3F]'
            >
              Apply
            </Button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className='z-[1] flex items-center justify-between bg-white pe-[14px]'>
      <div
        className={twMerge(
          'z-[1] flex h-fit min-h-[58px] gap-[8px] ps-[14px] pe-[12px] pt-[10px] pb-[8px]',
          (!!def?.types?.length || !!def?.content?.length) && 'min-h-[50px]',
          className
        )}
      >
        <div className='filters-button flex flex-wrap items-start gap-[10px]'>
          {showTags &&
            !!def?.types?.length &&
            def.types.map((type) => <TypeChip key={type} type={type} />)}
          {showTags &&
            def?.content?.map((c: string, index: number) => (
              <CondChip key={c} text={c} index={index} wrapperClassName='cursor-auto' />
            ))}
          {showDropdown && <DropDownFilter />}
        </div>
      </div>
      {deleteFilterTab && (
        <Button
          onClick={() => deleteFilterTab(filterId)}
          variant='outline'
          className='mt-[10px] size-[28px] min-h-[28px] min-w-[28px] self-start rounded-[6px] border border-[#EEEEEE] p-0 shadow-main'
        >
          <X className='size-[14px] min-h-[14px] min-w-[14px]' />
        </Button>
      )}
    </div>
  )
}

export default memo(LogFilters)
