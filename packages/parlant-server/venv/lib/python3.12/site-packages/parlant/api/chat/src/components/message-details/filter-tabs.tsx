/* eslint-disable @typescript-eslint/no-explicit-any */

import { useState } from 'react'
import { Plus } from 'lucide-react'
import { twJoin, twMerge } from 'tailwind-merge'
import type { Level, Type } from '../log-filters/log-filters'

interface DefInterface {
  level?: Level
  types?: Type[]
  content?: string[]
}

export interface Filter {
  id: number
  name: string
  def: DefInterface | null
}

interface FilterTabsFilterProps {
  filterTabs: Filter[]
  setCurrFilterTabs: React.Dispatch<React.SetStateAction<number | null>>
  setFilterTabs: React.Dispatch<React.SetStateAction<Filter[]>>
  currFilterTabs: number | null
}

const FilterTabs = ({
  filterTabs,
  setCurrFilterTabs,
  setFilterTabs,
  currFilterTabs,
}: FilterTabsFilterProps) => {
  const [isEditing, setIsEditing] = useState(false)
  const [inputVal, setInputVal] = useState('')

  const addFilter = () => {
    const val: Filter = { id: Date.now(), name: 'Logs', def: { level: 'DEBUG', types: [] } }
    const allTabs = [...filterTabs, val]
    setFilterTabs(allTabs)
    setCurrFilterTabs(val.id)
  }

  const clicked = (e: React.MouseEvent<HTMLParagraphElement>, tab: Filter) => {
    e.stopPropagation()
    setIsEditing(true)
    setInputVal(tab.name)
    function selectText() {
      const range = document.createRange()
      const selection = window.getSelection()
      if (!e.target) return
      range.selectNodeContents(e.target as Node)
      selection?.removeAllRanges()
      selection?.addRange(range)
    }
    selectText()
  }

  const editFinished = (e: any, tab: Filter) => {
    setIsEditing(false)
    if (!e.target.textContent) e.target.textContent = inputVal || tab.name
    tab.name = e.target.textContent
    localStorage.setItem('filters', JSON.stringify(filterTabs))
    e.target.blur()
    const selection = window.getSelection()
    selection?.removeAllRanges()
  }

  const editCancelled = (e: any, tab: Filter) => {
    setIsEditing(false)
    e.target.textContent = tab.name
    e.target.blur()
  }

  return (
    <div
      className={twMerge(
        'filter-tabs no-scrollbar z-10 flex min-h-[42px] items-center gap-[8px] overflow-x-auto overflow-y-visible border-[#EDEFF3] border-b bg-white ps-[10px]',
        isEditing && 'border-[#ebecf0]'
      )}
    >
      {filterTabs.map((tab: Filter) => (
        <div
          className={twJoin(
            'relative rounded-[6px] border border-transparent bg-[#FAFAFA] text-[#A9A9A9] hover:bg-[#F3F5F9] hover:text-[#282828]',
            tab.id === currFilterTabs && '!bg-[#FAFAFA] !text-[#282828] shadow-main-inset',
            tab.id === currFilterTabs && isEditing && '!border-black !shadow-none'
          )}
          key={tab.id}
          role='button'
          onClick={() => {
            setIsEditing(false)
            setCurrFilterTabs(tab.id)
          }}
        >
          <div
            className={twJoin(
              'group flex max-h-[28px] min-h-[28px] w-fit max-w-[200px] items-center justify-center rounded-[6px] border border-transparent border-e text-[15px] leading-[18px]',
              tab.id === currFilterTabs && isEditing && 'h-full rounded-[5px]'
            )}
          >
            <div className={twMerge('relative flex max-w-full items-center gap-[8px]')}>
              <p
                tabIndex={-1}
                onClick={(e) => tab.id === currFilterTabs && clicked(e, tab)}
                contentEditable={tab.id === currFilterTabs && isEditing}
                suppressContentEditableWarning
                onKeyDown={(e) =>
                  e.key === 'Enter'
                    ? editFinished(e, tab)
                    : e.key === 'Escape' && editCancelled(e, tab)
                }
                onBlur={(e) => editFinished(e, tab)}
                className={twMerge(
                  '!justify-start flex h-[28px] flex-1 items-center overflow-hidden text-ellipsis whitespace-nowrap border border-transparent px-[8px] text-[15px] outline-none',
                  tab.id === currFilterTabs && !isEditing && 'hover:cursor-text'
                )}
              >
                {tab.name}
              </p>
              {/* {filterTabs.length > 0 && <img src='icons/close.svg' alt='close' className='h-[20px]' role='button' height={10} width={10} onClick={() => deleteFilterTab(tab.id)} />} */}
            </div>
          </div>
        </div>
      ))}
      <div
        className='sticky right-0 flex size-[28px] w-fit min-w-[28px] items-center justify-center gap-[10px] rounded-[6px] bg-white text-[#151515] hover:bg-[#f3f5f9] hover:text-[#151515]'
        role='button'
        onClick={addFilter}
      >
        <Plus size={16} />
      </div>
    </div>
  )
}

export default FilterTabs
