import { Component, type ReactNode } from 'react'

interface Props {
  children: ReactNode
  component?: ReactNode
}

interface State {
  hasError: boolean
  errorStack?: string
}

export default class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = { hasError: false }
  }

  static getDerivedStateFromError() {
    return { hasError: true }
  }

  componentDidCatch(error: Error) {
    this.setState({ errorStack: error.stack })
  }

  render(): ReactNode {
    return this.state.hasError
      ? this.props.component || (
          <div className='flex h-screen flex-col items-center justify-center bg-main'>
            <img
              src='/chat/logo-color.svg'
              alt='Logo'
              height={200}
              width={200}
              className='mb-[10px]'
            />
            <h1 className='text-[20px]'>Oops! Something went wrong</h1>
            <p className='text-center'>
              We apologize for the inconvenience. Please try again later, or{' '}
              <a href='/' className='underline'>
                try again now
              </a>
              .
            </p>
            <div
              className={
                'mt-[40px] flex max-h-[300px] justify-center break-words rounded-[10px] border border-[#dedcdc] border-solid bg-[#f0eeee] p-[10px]'
              }
            >
              <code className='max-h-[300px] w-[600px] max-w-[80vw] overflow-auto'>
                {this.state.errorStack}
              </code>
            </div>
          </div>
        )
      : this.props.children
  }
}
