/* eslint-disable react-refresh/only-export-components */
import { createContext, type ReactElement, useEffect, useState } from 'react'
import { useAtom } from 'jotai'
import { Helmet } from 'react-helmet'
import { twMerge } from 'tailwind-merge'
import { useDialog } from '@/hooks/useDialog'
import { agentAtom, dialogAtom, sessionAtom, sessionsAtom } from '@/store'
import { spaceClick } from '@/utils/methods'
import AgentList, { NEW_SESSION_ID } from '../agents-list/agent-list'
import ChatHeader from '../chat-header/chat-header'
import ErrorBoundary from '../error-boundary/error-boundary'
import SessionList from '../session-list/session-list'
import SessionView from '../session-view/session-view'

export const SessionProvider = createContext({})

const SessionsSection = () => {
  const [filterSessionVal, setFilterSessionVal] = useState('')
  return (
    <div className='z-[11] h-full w-[352px] min-w-[352px] overflow-hidden rounded-[16px] border-solid bg-white [box-shadow:0px_0px_25px_0px_#0000000A] max-mobile:hidden '>
      <ChatHeader setFilterSessionVal={setFilterSessionVal} filterSessionVal={filterSessionVal} />
      <SessionList filterSessionVal={filterSessionVal} />
    </div>
  )
}

export default function Chatbot(): ReactElement {
  // const SessionView = lazy(() => import('../session-view/session-view'));
  const [sessionName, setSessionName] = useState<string | null>('')
  const { openDialog, DialogComponent, closeDialog } = useDialog()
  const [showMessage, setShowMessage] = useState(false)
  const [sessions] = useAtom(sessionsAtom)
  const [session, setSession] = useAtom(sessionAtom)
  const [, setDialog] = useAtom(dialogAtom)
  const [filterSessionVal, setFilterSessionVal] = useState('')
  const [, setAgent] = useAtom(agentAtom)
  const [dialog] = useAtom(dialogAtom)

  useEffect(() => {
    if (sessions) {
      setShowMessage(!!sessions.length)
    }
    setTimeout(() => {
      setShowMessage(true)
    }, 500)
  }, [sessions])

  useEffect(() => {
    if (session?.id) {
      if (session?.id === NEW_SESSION_ID) setSessionName('Parlant | New Session')
      else {
        const sessionTitle = session?.title
        if (sessionTitle) setSessionName(`Parlant | ${sessionTitle}`)
      }
    } else setSessionName('Parlant')
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [session?.id])

  useEffect(() => {
    setDialog({ openDialog, closeDialog })
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  const createNewSession = () => {
    setSession(null)
    setAgent(null)
    dialog.openDialog('', <AgentList />, { height: '536px', width: '604px' })
  }

  return (
    <ErrorBoundary>
      <SessionProvider.Provider value={{}}>
        <Helmet defaultTitle={`${sessionName}`} />
        <div
          data-testid='chatbot'
          className={'main flex h-screen flex-col rounded-[16px] bg-green-light'}
        >
          <div className='hidden rounded-[16px] max-mobile:block'>
            <ChatHeader
              setFilterSessionVal={setFilterSessionVal}
              filterSessionVal={filterSessionVal}
            />
          </div>
          <div
            className={twMerge(
              'flex w-full flex-1 flex-row gap-[14px] overflow-auto bg-green-light px-[14px] py-[14px]'
            )}
          >
            <SessionsSection />
            {session?.id ? (
              <div className='h-full w-[calc(100vw-352px-40px)] max-w-[calc(100vw-352px-40px)] rounded-[16px] bg-white max-[800px]:w-full max-[800px]:max-w-full '>
                <SessionView />
              </div>
            ) : (
              <div className='flex flex-1 flex-col items-center justify-center gap-[27px]'>
                <img
                  className='pointer-events-none'
                  src='select-session.svg'
                  fetchPriority='high'
                  alt=''
                />
                <p className='flex select-none flex-col items-center gap-[10px] font-light text-[#3C8C71] text-[18px]'>
                  {showMessage && !sessions.length
                    ? 'Start a session to begin chatting'
                    : 'Select or start a session to begin chatting'}
                  <div className='group'>
                    <img
                      src='buttons/new-session.svg'
                      alt='add session'
                      className='w-[76px] cursor-pointer shadow-main group-hover:hidden'
                      onKeyDown={spaceClick}
                      onClick={createNewSession}
                    />
                    <img
                      src='buttons/new-session-hover.svg'
                      alt='add session'
                      className='hidden w-[76px] cursor-pointer shadow-main group-hover:block'
                      onKeyDown={spaceClick}
                      onClick={createNewSession}
                    />
                  </div>
                </p>
              </div>
            )}
          </div>
        </div>
      </SessionProvider.Provider>
      <DialogComponent />
    </ErrorBoundary>
  )
}
