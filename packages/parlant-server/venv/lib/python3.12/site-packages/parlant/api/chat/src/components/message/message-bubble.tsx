/* eslint-disable react-hooks/exhaustive-deps */
import { useEffect, useRef, useState } from 'react'
import { useAtom } from 'jotai'
import { Eye, EyeOff, Flag, Search } from 'lucide-react'
import { twJoin, twMerge } from 'tailwind-merge'
// import MessageRelativeTime from './message-relative-time';
import { copy } from '@/lib/utils'
import { agentAtom, customerAtom, dialogAtom, sessionAtom } from '@/store'
import type { EventInterface } from '@/utils/interfaces'
import { getAvatarColor } from '../avatar/avatar'
import Markdown from '../markdown/markdown'
import FlagMessage from '../message-details/flag-message'
import { Button } from '../ui/button'
import Tooltip from '../ui/custom/tooltip'
import DraftBubble from './draft-bubble'

interface Props {
  event: EventInterface
  isContinual: boolean
  isSameSourceAsPrevious?: boolean
  isRegenerateHidden?: boolean
  isFirstMessageInDate?: boolean
  flagged?: string
  flaggedChanged?: (flagged: string) => void
  showLogsForMessage?: EventInterface | null
  regenerateMessageFn?: (sessionId: string) => void
  resendMessageFn?: (sessionId: string, text?: string) => void
  showLogs: (event: EventInterface) => void
  setIsEditing?: React.Dispatch<React.SetStateAction<boolean>>
  sameCorrelationMessages?: EventInterface[]
}

const MessageBubble = ({
  event,
  isFirstMessageInDate,
  showLogs,
  isContinual,
  showLogsForMessage,
  setIsEditing,
  flagged,
  flaggedChanged,
  sameCorrelationMessages,
}: Props) => {
  const ref = useRef<HTMLDivElement>(null)
  const [agent] = useAtom(agentAtom)
  const [customer] = useAtom(customerAtom)
  const markdownRef = useRef<HTMLSpanElement>(null)
  const [showDraft, setShowDraft] = useState(false)
  const [, setRowCount] = useState(1)
  const [dialog] = useAtom(dialogAtom)
  const [session] = useAtom(sessionAtom)

  useEffect(() => {
    if (!markdownRef?.current) return
    const rowCount = Math.floor(markdownRef.current.offsetHeight / 24)
    setRowCount(rowCount + 1)
  }, [markdownRef, showDraft])

  // FIXME:
  // rowCount SHOULD in fact be automatically calculated to
  // benefit from nice, smaller one-line message boxes.
  // However, currently we couldn't make it work in all
  // of the following use cases in draft/canned-response switches:
  // 1. When both draft and canned response are multi-line
  // 2. When both draft and canned response are one-liners
  // 3. When one is a one-liner and the other isn't
  // Therefore for now I'm disabling isOneLiner
  // until fixed.  -- Yam
  const isOneLiner = false // FIXME: see above

  const isCustomer = event.source === 'customer' || event.source === 'customer_ui'
  const serverStatus = event.serverStatus
  const isGuest = customer?.id === 'guest'
  const customerName = isGuest ? 'G' : customer?.name?.[0]?.toUpperCase()
  const isViewingCurrentMessage = showLogsForMessage && showLogsForMessage.id === event.id
  const colorPallete = getAvatarColor(
    (isCustomer ? customer?.id : agent?.id) || '',
    isCustomer ? 'customer' : 'agent'
  )
  const name = isCustomer ? customer?.name : agent?.name
  const formattedName = isCustomer && isGuest ? 'Guest' : name

  return (
    <>
      <div
        className={twMerge(
          isCustomer ? 'justify-end' : 'justify-start',
          'flex w-[calc(100%-412px)] max-w-[min(1000px,100%)] flex-1 items-end max-[1440px]:w-[calc(100%-160px)] max-[900px]:w-[calc(100%-40px)]'
        )}
      >
        <div className='relative max-w-[80%]'>
          {(!isContinual || isFirstMessageInDate) && (
            <div
              className={twJoin(
                'mt-[46px] mb-[12px] flex max-w-[min(560px,100%)] items-center',
                isCustomer && 'justify-self-end',
                isFirstMessageInDate && 'mt-[0]',
                isCustomer && 'flex-row-reverse'
              )}
            >
              <div
                className={twJoin('flex contents items-center', isCustomer && 'flex-row-reverse')}
              >
                <div
                  className={twMerge(
                    'flex size-[26px] min-h-[26px] min-w-[26px] select-none items-center justify-center rounded-[6.5px] font-semibold',
                    isCustomer ? 'ms-[8px]' : 'me-[8px]'
                  )}
                  style={{
                    color: isCustomer ? 'white' : colorPallete.text,
                    background: isCustomer ? colorPallete.iconBackground : colorPallete?.background,
                  }}
                >
                  {(isCustomer ? customerName?.[0] : agent?.name?.[0])?.toUpperCase()}
                </div>
                <div className='truncate font-medium text-[#282828] text-[14px]'>
                  {formattedName}
                </div>
              </div>
              <div className='flex flex-1 items-center justify-end'>
                {!isCustomer &&
                  sameCorrelationMessages?.some((e: EventInterface) => e.data?.draft) && (
                    <div className='me-[6px] flex items-center border-[#EBECF0] border-e pe-[6px]'>
                      <Tooltip value={showDraft ? 'Hide Draft' : 'Show Draft'} side='top'>
                        <Button
                          data-selected={showDraft}
                          variant='ghost'
                          className='flex h-fit items-center gap-1 p-1'
                          onClick={() => setShowDraft(!showDraft)}
                        >
                          <div className='flex items-center gap-[6px] px-[.25em] font-normal text-[#777] text-[14px]'>
                            {showDraft ? (
                              <Eye size={16} color='#777' />
                            ) : (
                              <EyeOff size={16} color='#777' />
                            )}
                            Draft
                          </div>
                        </Button>
                      </Tooltip>
                    </div>
                  )}
                {flagged && (
                  <div className='me-[6px] flex items-center gap-1 border-[#EBECF0] border-e pe-[6px]'>
                    <Tooltip value='View comment' side='top'>
                      <Button
                        variant='ghost'
                        className='flex h-fit items-center gap-1 p-1'
                        onClick={() =>
                          dialog.openDialog(
                            'Flag Response',
                            <FlagMessage
                              existingFlagValue={flagged || ''}
                              events={sameCorrelationMessages || [event]}
                              sessionId={session?.id as string}
                              onFlag={flaggedChanged}
                            />,
                            { width: '600px', height: '636px' }
                          )
                        }
                      >
                        <Flag size={16} color='#777' />
                        <div className='px-[.25em] font-normal text-[#777] text-[14px]'>
                          {'Flagged'}
                        </div>
                      </Button>
                    </Tooltip>
                  </div>
                )}
                {/* <MessageRelativeTime event={event} /> */}
                {!isCustomer && (
                  <Tooltip value='View message actions and logs' side='top'>
                    <Button
                      data-selected={isViewingCurrentMessage}
                      variant='ghost'
                      className='flex h-fit items-center gap-1 p-1'
                      onClick={() => showLogs(event)}
                    >
                      <Search size={16} color='#777' />
                      <div className='px-[.25em] font-normal text-[#777] text-[14px]'>Inspect</div>
                    </Button>
                  </Tooltip>
                )}
              </div>
            </div>
          )}
          <DraftBubble
            open={showDraft}
            draft={sameCorrelationMessages?.find((e) => e.data?.draft)?.data?.draft || ''}
          />
          <div className='group/main relative'>
            <div
              className={twMerge('flex max-w-full items-center', isCustomer && 'flex-row-reverse')}
            >
              <div className='max-w-full'>
                <div
                  ref={ref}
                  data-testid='message'
                  className={twMerge(
                    'border-[2px] border-transparent bg-green-light text-black hover:bg-[#F5F9F3]',
                    // isViewingCurrentMessage && '!bg-white hover:!bg-white border-[#EEEEEE] shadow-main',
                    isCustomer && serverStatus === 'error' && '!bg-[#FDF2F1] hover:!bg-[#F5EFEF]',
                    'peer relative flex w-[560px] max-w-[min(560px,100%)] items-center',
                    event?.serverStatus === 'pending' && 'opacity-50',
                    isOneLiner
                      ? 'rounded-[16px] p-[13px_22px_17px_22px]'
                      : 'rounded-[22px] p-[20px_22px_24px_22px]'
                  )}
                >
                  <div
                    className={twMerge(
                      'markdown relative min-w-[200px] max-w-[608px] overflow-hidden pe-[38px] font-light text-[16px] [word-break:break-word]'
                    )}
                  >
                    <span ref={markdownRef}>
                      <Markdown className={twJoin(!isOneLiner && 'leading-[26px]')}>
                        {event?.data?.message || ''}
                      </Markdown>
                    </span>
                  </div>
                  <div
                    className={twMerge(
                      'flex h-full items-end self-end whitespace-nowrap pe-[20px] font-inter font-normal text-[#AEB4BB] text-[11px] leading-[14px]',
                      isOneLiner ? 'ps-[12px]' : ''
                    )}
                  />
                </div>
              </div>
              <div
                className={twMerge(
                  'invisible relative mx-[10px] flex items-center self-stretch hover:visible group-hover/main:visible peer-hover:visible'
                )}
              >
                <Tooltip value='Copy' side='top'>
                  <div
                    data-testid='copy-button'
                    role='button'
                    onClick={() => copy(event?.data?.message || '')}
                    className='group cursor-pointer'
                  >
                    <img
                      src='icons/copy.svg'
                      alt='edit'
                      className='block size-[30px] rounded-[10px] p-[5px] opacity-50 group-hover:bg-[#EBECF0]'
                    />
                  </div>
                </Tooltip>
                {isCustomer && (
                  <Tooltip value='Edit' side='top'>
                    <div
                      data-testid='edit-button'
                      role='button'
                      onClick={() => setIsEditing?.(true)}
                      className='group cursor-pointer'
                    >
                      <img
                        src='icons/edit-message.svg'
                        alt='edit'
                        className='block size-[30px] rounded-[10px] p-[5px] opacity-50 group-hover:bg-[#EBECF0]'
                      />
                    </div>
                  </Tooltip>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export default MessageBubble
