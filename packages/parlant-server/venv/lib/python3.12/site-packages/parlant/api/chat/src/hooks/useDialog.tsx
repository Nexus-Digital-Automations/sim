import { type ReactNode, useState } from 'react'
import { DialogDescription, DialogTitle } from '@radix-ui/react-dialog'
import clsx from 'clsx'
import { Dialog, DialogContent, DialogHeader, DialogPortal } from '@/components/ui/dialog'
import { spaceClick } from '@/utils/methods'

interface UseDialogReturn {
  openDialog: (title: string | null, content: ReactNode, dimensions: Dimensions) => void
  DialogComponent: () => JSX.Element
  closeDialog: (e?: React.MouseEvent) => void
}

export interface Dimensions {
  height: string
  width: string
}

export const useDialog = (): UseDialogReturn => {
  const [dialogTitle, setDialogTitle] = useState<ReactNode>(null)
  const [dialogContent, setDialogContent] = useState<ReactNode>(null)
  const [dialogSize, setDialogSize] = useState<Dimensions>({ height: '', width: '' })
  const [onDialogClosed, setOnDialogClosed] = useState<(() => void) | null>(null)

  const openDialog = (
    title: string | null,
    content: ReactNode,
    dimensions: Dimensions,
    dialogClosed = null
  ) => {
    if (title) setDialogTitle(title)
    setDialogContent(content)
    setDialogSize({ height: dimensions.height, width: dimensions.width })
    if (dialogClosed) setOnDialogClosed(dialogClosed)
  }

  const closeDialog = (e?: React.MouseEvent) => {
    e?.stopPropagation()
    setDialogContent(null)
    setDialogTitle(null)
    onDialogClosed?.()
    setOnDialogClosed(null)
  }

  const DialogComponent = () => (
    <Dialog open={!!dialogContent}>
      <DialogPortal>
        <DialogContent
          data-testid='dialog'
          aria-hidden={false}
          style={{ maxHeight: dialogSize.height, width: dialogSize.width }}
          className={
            '!pointer-events-auto z-[99] block h-[80%] max-w-[95%] bg-white p-0 font-inter [&>button]:hidden'
          }
        >
          <div className='flex h-full flex-col rounded-[12px] bg-white' aria-hidden={false}>
            <DialogHeader className={clsx(!dialogTitle && 'hidden')}>
              <DialogTitle>
                <div className='mt-[24px] mb-[12px] flex w-full items-center justify-between ps-[30px] pe-[20px]'>
                  <DialogDescription className='font-semibold text-[20px]'>
                    {dialogTitle}
                  </DialogDescription>
                  <img
                    onKeyDown={spaceClick}
                    onClick={closeDialog}
                    className='cursor-pointer rounded-full'
                    src='icons/close.svg'
                    alt='close'
                    width={24}
                    height={24}
                  />
                </div>
              </DialogTitle>
            </DialogHeader>
            <div className='flex-1 overflow-auto'>{dialogContent}</div>
          </div>
        </DialogContent>
      </DialogPortal>
    </Dialog>
  )

  return { openDialog, DialogComponent, closeDialog }
}
