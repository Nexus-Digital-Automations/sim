import { useRef } from 'react'
import clsx from 'clsx'
import { X } from 'lucide-react'
import { twJoin } from 'tailwind-merge'
import { copy } from '@/lib/utils'
import { useDialog } from '@/hooks/useDialog'
import type { Log } from '@/utils/interfaces'
import CodeEditor from '../ui/custom/line-no-div'
import Tooltip from '../ui/custom/tooltip'

const MessageLog = ({ log }: { log: Log }) => {
  const { openDialog, DialogComponent, closeDialog } = useDialog()
  const ref = useRef<HTMLPreElement>(null)

  const openLogs = (text: string) => {
    const element = (
      <pre
        ref={ref}
        className='group fixed-scroll relative h-[100%] overflow-auto text-wrap rounded-[12px] border-white border-y-[10px] font-ibm-plex-mono font-light text-[#333]'
      >
        <div className='invisble fixed top-[10px] right-[10px] z-[999] flex w-fit justify-end [justify-self:end] group-hover:visible'>
          <div className='flex w-fit justify-end gap-[20px] rounded-lg bg-white p-[10px]'>
            <Tooltip value='Copy' side='top'>
              <img
                src='icons/copy.svg'
                alt=''
                onClick={() => copy(text, ref?.current || undefined)}
                className='cursor-pointer'
              />
            </Tooltip>
            <Tooltip value='Close' side='top'>
              <X onClick={() => closeDialog()} size={18} className='cursor-pointer' />
            </Tooltip>
          </div>
        </div>
        {/* <div className='[word-break:break-all]'>{text}</div> */}
        <CodeEditor text={text} />
      </pre>
    )
    openDialog('', element, { height: '90vh', width: 'min(90vw, 1200px)' })
  }

  return (
    <div
      className={twJoin(
        'group relative flex max-h-[200px] w-full gap-[5px] overflow-hidden px-[20px] font-ubuntu-mono text-[14px] transition-all hover:bg-[#FAFAFA]'
      )}
    >
      <div className='absolute top-[10px] right-[10px] z-10 hidden gap-[5px] group-hover:flex'>
        <Tooltip value='Copy' side='top'>
          <div
            onClick={() => copy(log?.message || '')}
            className='flex size-[28px] cursor-pointer items-center justify-center rounded-[6px] border border-[#EEEEEE] bg-white hover:border-[#E9EBEF] hover:bg-[#F3F5F9]'
          >
            <img src='icons/copy.svg' alt='' />
          </div>
        </Tooltip>
        <Tooltip value='Expand' side='top'>
          <div
            onClick={() => openLogs(log?.message || '')}
            className='flex size-[28px] cursor-pointer items-center justify-center rounded-[6px] border border-[#EEEEEE] bg-white hover:border-[#E9EBEF] hover:bg-[#F3F5F9]'
          >
            <img src='icons/expand.svg' alt='' />
          </div>
        </Tooltip>
      </div>
      <pre
        className={clsx(
          'max-w-[-webkit-fill-available] text-wrap border-white border-y-[10px] pe-[10px] font-ibm-plex-mono font-light group-hover:border-[#FAFAFA]'
        )}
      >
        {log?.message?.trim()}
      </pre>
      <DialogComponent />
    </div>
  )
}

export default MessageLog
