import { useState } from 'react'
import { useAtom } from 'jotai'
import { addItemToIndexedDB, deleteItemFromIndexedDB } from '@/lib/utils'
import { dialogAtom } from '@/store'
import type { EventInterface } from '@/utils/interfaces'
import { Button } from '../ui/button'
import { Textarea } from '../ui/textarea'

interface FlagMessageProps {
  events: EventInterface[]
  sessionId: string
  onFlag?: (flagValue: string) => void
  existingFlagValue?: string
}

const FlagMessage = ({ events, sessionId, existingFlagValue, onFlag }: FlagMessageProps) => {
  const [dialog] = useAtom(dialogAtom)
  const [flagValue, setFlagValue] = useState(existingFlagValue || '')
  const correlationId = events?.[0]?.correlation_id

  const flagMessage = async () => {
    await addItemToIndexedDB(
      'Parlant-flags',
      'message_flags',
      correlationId,
      {
        sessionId,
        correlationId: correlationId,
        flagValue: flagValue || 'This message is flagged',
      },
      'update',
      { name: 'sessionIndex', keyPath: 'sessionId' }
    )
    onFlag?.(flagValue || '')
    dialog.closeDialog()
  }

  const unflagMessage = async () => {
    await deleteItemFromIndexedDB('Parlant-flags', 'message_flags', correlationId)
    onFlag?.('')
    dialog.closeDialog()
  }

  return (
    <div className='flex h-full flex-col gap-3 px-[24px] pb-3'>
      <div>
        <p className='text-[#959595] text-[16px]'>
          Feedback provided here will show up in the session's exported CSV file.
        </p>
      </div>
      <div className='mt-[26px] flex flex-col gap-1 overflow-auto'>
        {events.map((event) => {
          return (
            <div className='message-bubble [&>*]:w-full [&_*]:cursor-default'>
              <div className='!w-fit mb-[10px] max-w-[90%] rounded-[22px] bg-[#F5F9F7] px-[22px] py-[20px]'>
                {event?.data?.message}
              </div>
            </div>
          )
        })}
      </div>
      <Textarea
        autoFocus
        placeholder='Enter your flag reason'
        value={flagValue}
        onChange={(e) => setFlagValue(e.target.value)}
        className='!ring-0 !ring-offset-0 !resize-none flex-1 text-[16px] placeholder:text-[#959595]'
      />
      <div className='flex justify-end gap-3'>
        <Button variant='outline' onClick={() => dialog.closeDialog()}>
          Cancel
        </Button>
        {existingFlagValue && (
          <Button variant='outline' onClick={unflagMessage}>
            Unflag
          </Button>
        )}
        <Button className='bg-green-main hover:bg-[#005C3F]' onClick={flagMessage}>
          Save
        </Button>
      </div>
    </div>
  )
}

export default FlagMessage
