# Composite Action: Setup Test Environment
# =======================================
#
# Reusable composite action for setting up the test environment
# for workflow-journey testing across all CI/CD jobs.

name: 'Setup Test Environment'
description: 'Setup Node.js, Bun, and dependencies for workflow-journey testing'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  bun-version:
    description: 'Bun version to use'
    required: false
    default: '1.2.13'
  install-python:
    description: 'Whether to install Python dependencies'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ inputs.bun-version }}

    - name: Setup Python (if requested)
      if: inputs.install-python == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Dependencies
      shell: bash
      run: |
        echo "📦 Installing dependencies..."
        bun install --frozen-lockfile

        # Install Python dependencies if requested
        if [[ "${{ inputs.install-python }}" == "true" && -f "packages/parlant-server/requirements.txt" ]]; then
          cd packages/parlant-server
          pip install -r requirements.txt
        fi

    - name: Create Test Directories
      shell: bash
      run: |
        echo "📁 Creating test directories..."
        mkdir -p apps/sim/test-results
        mkdir -p apps/sim/coverage
        mkdir -p test-reports

    - name: Validate Environment
      shell: bash
      run: |
        echo "✅ Environment validation:"
        echo "Node.js: $(node --version)"
        echo "Bun: $(bun --version)"
        echo "NPM: $(npm --version)"

        if [[ "${{ inputs.install-python }}" == "true" ]]; then
          echo "Python: $(python3 --version)"
          echo "Pip: $(pip --version)"
        fi

        # Check available memory and disk space
        echo "Memory: $(free -h | awk '/^Mem:/ { print $2 }' 2>/dev/null || echo 'N/A')"
        echo "Disk: $(df -h . | awk 'NR==2 { print $4 }' 2>/dev/null || echo 'N/A')"