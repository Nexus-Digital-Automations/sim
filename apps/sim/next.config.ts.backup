import type { NextConfig } from "next";
import { env } from "./lib/env";
import { isProd } from "./lib/environment";

const nextConfig: NextConfig = {
  // Removed static export to fix build hanging issue

  // Enable optimized images with basic configuration
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "**",
      },
    ],
    formats: ["image/webp", "image/avif"],
  },

  // Enable TypeScript and ESLint for production builds
  typescript: {
    ignoreBuildErrors: false,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },

  // Completely disable experimental features to fix build timeout
  experimental: {
    // All experimental features disabled to prevent optimization hangs
  },

  // EMERGENCY BUILD MODE - Heavy optimizations disabled via webpack config

  // External packages that should not be bundled
  serverExternalPackages: [
    "fs",
    "path",
    "crypto",
    "stream",
    "util",
    "os",
    "sharp",
    "canvas",
    "better-sqlite3",
    "fsevents",
    "mysql2",
    "pg",
    "sqlite3",
  ],

  // Optimized webpack configuration to handle large files
  webpack: (config, { isServer }) => {
    // Ensure parlant-chat-react is properly resolved
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        path: false,
      };
    }

    // Optimize handling of large files that cause build timeouts
    if (!isServer) {
      // Exclude test files from client bundle completely
      config.resolve.alias = {
        ...config.resolve.alias,
        "@test-utils": false,
      };

      // Add specific handling for all massive files (>2000 lines)
      config.module.rules.push({
        test: /\/(components\/icons\.tsx|.*user-input\.tsx|stores\/.*store\.ts|executor\/index\.ts)$/,
        use: [
          {
            loader: "babel-loader",
            options: {
              presets: ["next/babel"],
              cacheDirectory: true,
              // Skip heavy optimizations for massive files
              compact: false,
              minified: false,
            },
          },
        ],
      });

      // Re-enable selective optimizations with exclusions for problematic files
      config.optimization = {
        ...config.optimization,
        minimize: true,
        minimizer: config.optimization.minimizer?.map((minimizer: any) => {
          if (minimizer.constructor.name === "TerserPlugin") {
            minimizer.options = {
              ...minimizer.options,
              exclude: [
                /\/components\/icons\.tsx$/,
                /.*user-input\.tsx$/,
                /stores\/.*store\.ts$/,
                /executor\/index\.ts$/,
                /\.test\.ts$/,
                /\.test\.tsx$/,
              ], // Exclude massive files from minification
              parallel: 2, // Reduce parallelism to prevent memory issues
            };
          }
          return minimizer;
        }),
        sideEffects: false,
        usedExports: true,
        providedExports: true,
        concatenateModules: false, // Keep disabled to prevent timeout
        splitChunks: {
          chunks: "all",
          cacheGroups: {
            // Separate massive files into their own chunks
            icons: {
              test: /\/components\/icons\.tsx$/,
              name: "icons",
              chunks: "all",
              enforce: true,
            },
            largeComponents: {
              test: /.*user-input\.tsx$/,
              name: "large-components",
              chunks: "all",
              enforce: true,
            },
            stores: {
              test: /stores\/.*store\.ts$/,
              name: "stores",
              chunks: "all",
              enforce: true,
            },
            executor: {
              test: /executor\/index\.ts$/,
              name: "executor",
              chunks: "all",
              enforce: true,
            },
          },
        },
      };
    }

    return config;
  },

  // Performance optimizations
  poweredByHeader: false,
  generateEtags: true,
  compress: true,
  trailingSlash: false,
};

const sentryConfig = {
  silent: true,
  org: env.SENTRY_ORG || "",
  project: env.SENTRY_PROJECT || "",
  authToken: env.SENTRY_AUTH_TOKEN || undefined,
  disableSourceMapUpload: !isProd,
  autoInstrumentServerFunctions: isProd,
  bundleSizeOptimizations: {
    excludeDebugStatements: true,
    excludePerformanceMonitoring: true,
    excludeReplayIframe: true,
    excludeReplayShadowDom: true,
    excludeReplayWorker: true,
  },
};

// Temporarily disable SENTRY during build to debug timeout issue
export default nextConfig;
// export default isDev ? nextConfig : withSentryConfig(nextConfig, sentryConfig)
